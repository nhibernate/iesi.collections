<?xml version="1.0" ?>
<project name="Iesi.Collections" default="build" xmlns="http://nant.sf.net/release/0.85-rc3/nant.xsd">

	<property name="root.dir" value="." />
	<property name="project.version" value="4.1.0" overwrite="false" />

	<!-- Pass -D:skip.tests=true to NAnt to skip running tests when building -->
	<property name="skip.tests" value="false" overwrite="false" />

	<target name="init" description="Initializes build properties">
		<property name="project.config" value="debug" overwrite="false" />
		<property name="build.name" value="Iesi.Collections-${project.version}-${project.config}" />
		<property name="build.dir" value="${root.dir}/build/${build.name}" />
	</target>

	<target name="build" 
		depends="init nuget.set-properties" 
		description="Builds Iesi.Collections in the current configuration">

		<exec workingdir="${root.dir}/src" program="dotnet">
			<arg value="build" />
			<arg value="-c" />
			<arg value="${project.config}" />
			<arg value="/p:PackageOutputPath=&quot;${path::get-full-path(nuget.nupackages.dir)}&quot;" />
			<arg value="Iesi.Collections.sln" />
		</exec>
	</target>

	<target name="run-tests" description="Run NUnitLite tests">
		<exec program="${test.file}">
			<arg value="--result=test-results.xml;format=nunit2" />
			<arg value="--teamcity" if="${property::exists('config.teamcity')}" />
		</exec>
	</target>

	<target name="run-core-tests" description="Run .NET Core NUnitLite tests">
		<exec program="dotnet">
			<arg value="exec" />
			<arg value="${test.file}" />
			<arg value="--result=test-results.xml;format=nunit2" />
			<arg value="--teamcity" if="${property::exists('config.teamcity')}" />
		</exec>
	</target>

	<target name="test" depends="init build" description="Runs all Iesi.Collections tests for the current framework" unless="${skip.tests}">
		<property name="tests.basedir" value="${root.dir}/src/Iesi.Collections.Test/bin/${project.config}" />
		<property name="test.file" value="${tests.basedir}/net40/Iesi.Collections.Test.exe" />
		<call target="run-tests" />
		<property name="test.file" value="${tests.basedir}/net461/Iesi.Collections.Test.exe" />
		<call target="run-tests" />
		<property name="test.file" value="${tests.basedir}/net8.0/Iesi.Collections.Test.dll" />
		<call target="run-core-tests" />
	</target>

	<target name="sources-zip" depends="init">
		<exec program="git" commandline="archive HEAD --format zip --output &quot;${build.dir}/Iesi.Collections-${project.version}-src.zip&quot;"/>
	</target>

	<target name="binaries-zip" depends="init bin-pack">
		<zip zipfile="${build.dir}/Iesi.Collections-${project.version}-bin.zip">
			<fileset basedir="${bin-pack.tmpdir}">
				<include name="**/*" />
			</fileset>
		</zip>
	</target>

	<target name="bin-pack" depends="init build">
		<property name="bin-pack.tmpdir" value="${build.dir}/tmp-bin" />
		<property name="bin-pack.bins" value="${bin-pack.tmpdir}/Bins" />
		<property name="bin-pack.tests" value="${bin-pack.tmpdir}/Tests" />
		
		<copy file="LICENSE.txt" todir="${bin-pack.tmpdir}"/>

		<exec program="CScript.exe" commandline="Tools\showdown\showdown.wsf README.md ${bin-pack.tmpdir}/readme.html"/>

		<copy todir="${bin-pack.bins}">
			<fileset basedir="src/Iesi.Collections/bin/${project.config}/">
				<include name="**/Iesi.Collections.???" />
			</fileset>
		</copy>
		
		<!-- Tests -->
		<copy todir="${bin-pack.tests}">
			<fileset basedir="src/Iesi.Collections.Test/bin/${project.config}/">
				<include name="**/Iesi.Collections.Test.???" />
			</fileset>
		</copy>
	</target>
	
	<target name="package" depends="init build test sources-zip binaries-zip" description="Creates files for the General Available Release on SourceForge">
		<echo message="Created a '${project.config}' package in ${build.dir}" />
	</target>
	
	<target name="release" depends="init build binaries-zip sources-zip"	description="Creates files for the partial (Alpha-Beta-Candidate) Release on SourceForge">
		<echo message="Created a '${project.config}' package in ${build.dir}" />
	</target>

	<target name="cleanall" description="Deletes every build configuration">
		<echo message="Deleting all builds from all configurations" />
		<delete dir="build" failonerror="false" />
	</target>

	<target name="clean" depends="init" description="Deletes current build">
		<delete dir="${build.dir}" failonerror="false" />
	</target>

	<target name="nuget.set-properties">
		<property name="nuget.nupackages.dir" value="${build.dir}/nuget_gallery" />
		<property name="nuget.nupackages.pushbatfile" value="${nuget.nupackages.dir}/NuGetPush.bat" />
	</target>

	<target name="nugetpushbat" depends="init build"
					description="Creates files for the release on nuget gallery.">

		<echo message="rem In order to use this bat you have to be sure you have executed 'nuget SetApiKey' ${environment::newline()}" file="${nuget.nupackages.pushbatfile}" append="false"/>
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${nuget.nupackages.dir}/*.nupkg"/>
					<exclude name="${nuget.nupackages.dir}/*.symbols.nupkg"/>
				</items>
			</in>
			<do>
				<echo message="dotnet nuget push -s https://nuget.org/ ${path::get-file-name(filename)} ${environment::newline()}" file="${nuget.nupackages.pushbatfile}" append="true"/>
			</do>
		</foreach>
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${nuget.nupackages.dir}/*.symbols.nupkg"/>
				</items>
			</in>
			<do>
				<echo message="nuget push -source https://nuget.smbsrc.net/ ${path::get-file-name(filename)} ${environment::newline()}" file="${nuget.nupackages.pushbatfile}" append="true"/>
			</do>
		</foreach>
	</target>

	<target name="nugetpush" depends="init build"
					description="Push packages on nuget gallery.">
		<!-- In order to use this task you have to be sure you have executed 'nuget SetApiKey' -->
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${nuget.nupackages.dir}/*.nupkg"/>
				</items>
			</in>
			<do>
				<exec workingdir="${nuget.nupackages.dir}" program="dotnet">
					<arg value="nuget" />
					<arg value="push" />
					<arg value="-s" />
					<arg value="https://nuget.org" />
					<arg value="${filename}" />
				</exec>
			</do>
		</foreach>
	</target>

</project>
